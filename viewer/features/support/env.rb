# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'simplecov'
SimpleCov.start 'rails' do
  add_filter '/features/'
end

require 'cucumber/rails'
require 'capybara/cucumber'
require 'capybara/rspec'

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Disable DatabaseCleaner (not needed with Rails 5.1+ and cucumber-rails >= 2)
Cucumber::Rails::Database.autorun_database_cleaner = false

# Possible values are :truncation and :transaction
# :transaction is faster, but might cause issues with JavaScript-enabled scenarios.
# Therefore we keep truncation for JS tests.
Cucumber::Rails::Database.javascript_strategy = :truncation

ENV['RAILS_ENV'] ||= 'test'
ENV['DATABASE_URL'] ||= 'postgres://postgres:postgres@postgres:5432/viewer_test'

Before do
  WeatherRecord.delete_all
  City.delete_all
end
